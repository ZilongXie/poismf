// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// r_wrapper_poismf
void r_wrapper_poismf(Rcpp::NumericVector A, Rcpp::NumericVector B, size_t dimA, size_t dimB, size_t k, Rcpp::NumericVector Xr, Rcpp::IntegerVector Xr_ind_int, Rcpp::IntegerVector Xr_indptr_int, Rcpp::NumericVector Xc, Rcpp::IntegerVector Xc_ind_int, Rcpp::IntegerVector Xc_indptr_int, size_t nnz, double l1_reg, double l2_reg, size_t niter, size_t npass, double step_size, int use_cg, int nthreads);
RcppExport SEXP _poismf_r_wrapper_poismf(SEXP ASEXP, SEXP BSEXP, SEXP dimASEXP, SEXP dimBSEXP, SEXP kSEXP, SEXP XrSEXP, SEXP Xr_ind_intSEXP, SEXP Xr_indptr_intSEXP, SEXP XcSEXP, SEXP Xc_ind_intSEXP, SEXP Xc_indptr_intSEXP, SEXP nnzSEXP, SEXP l1_regSEXP, SEXP l2_regSEXP, SEXP niterSEXP, SEXP npassSEXP, SEXP step_sizeSEXP, SEXP use_cgSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< size_t >::type dimA(dimASEXP);
    Rcpp::traits::input_parameter< size_t >::type dimB(dimBSEXP);
    Rcpp::traits::input_parameter< size_t >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Xr_ind_int(Xr_ind_intSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Xr_indptr_int(Xr_indptr_intSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Xc(XcSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Xc_ind_int(Xc_ind_intSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Xc_indptr_int(Xc_indptr_intSEXP);
    Rcpp::traits::input_parameter< size_t >::type nnz(nnzSEXP);
    Rcpp::traits::input_parameter< double >::type l1_reg(l1_regSEXP);
    Rcpp::traits::input_parameter< double >::type l2_reg(l2_regSEXP);
    Rcpp::traits::input_parameter< size_t >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< size_t >::type npass(npassSEXP);
    Rcpp::traits::input_parameter< double >::type step_size(step_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type use_cg(use_cgSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    r_wrapper_poismf(A, B, dimA, dimB, k, Xr, Xr_ind_int, Xr_indptr_int, Xc, Xc_ind_int, Xc_indptr_int, nnz, l1_reg, l2_reg, niter, npass, step_size, use_cg, nthreads);
    return R_NilValue;
END_RCPP
}
// predict_multiple
void predict_multiple(Rcpp::NumericVector A, Rcpp::NumericVector B, int k, size_t npred, Rcpp::IntegerVector ia, Rcpp::IntegerVector ib, Rcpp::NumericVector out, int nthreads);
RcppExport SEXP _poismf_predict_multiple(SEXP ASEXP, SEXP BSEXP, SEXP kSEXP, SEXP npredSEXP, SEXP iaSEXP, SEXP ibSEXP, SEXP outSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< size_t >::type npred(npredSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type ia(iaSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type ib(ibSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type out(outSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    predict_multiple(A, B, k, npred, ia, ib, out, nthreads);
    return R_NilValue;
END_RCPP
}
// factorize_single
void factorize_single(Rcpp::NumericVector a_vector, Rcpp::NumericVector x, Rcpp::IntegerVector ix, size_t nnz, Rcpp::NumericVector B, Rcpp::NumericVector Bsum, int k, double l2_reg);
RcppExport SEXP _poismf_factorize_single(SEXP a_vectorSEXP, SEXP xSEXP, SEXP ixSEXP, SEXP nnzSEXP, SEXP BSEXP, SEXP BsumSEXP, SEXP kSEXP, SEXP l2_regSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a_vector(a_vectorSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type ix(ixSEXP);
    Rcpp::traits::input_parameter< size_t >::type nnz(nnzSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Bsum(BsumSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type l2_reg(l2_regSEXP);
    factorize_single(a_vector, x, ix, nnz, B, Bsum, k, l2_reg);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_poismf_r_wrapper_poismf", (DL_FUNC) &_poismf_r_wrapper_poismf, 19},
    {"_poismf_predict_multiple", (DL_FUNC) &_poismf_predict_multiple, 8},
    {"_poismf_factorize_single", (DL_FUNC) &_poismf_factorize_single, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_poismf(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
